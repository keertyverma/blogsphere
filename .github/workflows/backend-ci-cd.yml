# This workflow automates CI/CD process for a Node.js Express backend.
# It performs a clean installation of node dependencies, cache/restore them, build the application and deploying to Google App Engine.

name: Google App Engine CI/CD

on:
  push:
    branches: ["main", "post-deployment"]
  workflow_dispatch: # Allows manual trigger

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     checks: write # Allows publishing test results in GitHub UI

  #   strategy:
  #     matrix:
  #       node-version: [22.x]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: "npm"

  #     - name: Install dependencies
  #       run: |
  #         cd server
  #         npm ci

  #     - name: Setup Test Environment
  #       # openssl base64 -A -in .env.test -out .env.test.vault
  #       run: echo "${{secrets.TEST_ENV_BASE64}}" | openssl base64 -A -d > server/.env.test || { echo "Failed to decode .env.test"; exit 1; }

  #     - name: Run Integration Tests
  #       if: ${{ hashFiles('server/.env.test') != '' }}
  #       run: |
  #         cd server
  #         npm run test:integration

  #     - name: Upload XML Test Report (JUnit)
  #       if: always() # Runs even if tests fail
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: junit-test-report
  #         path: server/test-reports/junit.xml
  #         retention-days: 7

  #     - name: Publish Test Results in GitHub UI
  #       if: always() # Ensures test results appear even if tests fail
  #       uses: mikepenz/action-junit-report@v4
  #       with:
  #         report_paths: "server/test-reports/junit.xml"

  build-and-deploy:
    # needs: test # Ensures deployment only runs if tests pass!
    runs-on: ubuntu-latest
    permissions:
      id-token: "write" # Required for OIDC authentication with Google Cloud

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install and Build
        run: |
          cd server
          npm ci
          npm run build

      - name: Setup Production Environment
        # openssl base64 -A -in .env.production -out .env.production.vault
        run: echo "${{secrets.PRODUCTION_ENV_BASE64}}" | openssl base64 -A -d > server/.env.production || { echo "Failed to decode .env.production"; exit 1; }

      - name: Authenticate with Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{secrets.GCP_SA_KEY}}

      - name: Deploy to Google App Engine
        uses: google-github-actions/deploy-appengine@v2
        if: ${{ hashFiles('server/.env.production') != '' }}
        with:
          working_directory: ./server
          project_id: ${{secrets.GCP_PROJECT_ID}}
          # version: v1
          flags: --no-cache --stop-previous-version
          deliverables: app.yaml

      - name: Post Deployment Health Check
        run: |
          URL="${{ vars.HEALTHCHECK_URL }}"
          echo "Checking health at $URL"

          for i in {1..5}; do
            RESPONSE=$(curl -s -w "\n%{http_code}" $URL)
            BODY=$(echo "$RESPONSE" | head -n -1)
            STATUS=$(echo "$RESPONSE" | tail -n 1)

            if [ "$STATUS" -ne 200 ]; then
              echo "Health check failed (HTTP $STATUS). Retrying in 10s..."
              sleep 10
              continue
            fi

            API_STATUS=$(echo "$BODY" | jq -r '.status')
            DATABASE_STATUS=$(echo "$BODY" | jq -r '.database')

            if [[ "$API_STATUS" == "error" || "$DATABASE_STATUS" == "disconnected" ]]; then
              echo "Health check failed: API status = $API_STATUS, Database = $DATABASE_STATUS"
              exit 1
            fi

            echo "Health check passed!"
            exit 0
          done

          echo "Service did not become healthy in time. Failing deployment."
          exit 1
